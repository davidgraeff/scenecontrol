/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p lirid_proxy org.lirid.receiver.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef LIRID_PROXY_H
#define LIRID_PROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.liri.Device
 */
class OrgLiriDeviceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.liri.Device"; }

public:
    OrgLiriDeviceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgLiriDeviceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> ReceiverState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ReceiverState"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getAllSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getAllSettings"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getSettings(const QStringList &keys)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(keys);
        return asyncCallWithArgumentList(QLatin1String("getSettings"), argumentList);
    }

    inline QDBusPendingReply<> setSettings(const QStringList &settings)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(settings);
        return asyncCallWithArgumentList(QLatin1String("setSettings"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void key(const QString &keycode, const QString &keyname, uint channel, int pressed);
    void receiverStateChanged(int state);
};

namespace org {
  namespace liri {
    typedef ::OrgLiriDeviceInterface Device;
  }
}
#endif
