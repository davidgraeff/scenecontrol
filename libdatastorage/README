Part of scenecontrol project suite.

Purpose:
--------
This is a static library for the SceneServer to access the data storage.
An older version worked on a mongodb database. The current implementation
relies on the filesystem itself and operating system methods to get notified
of file changes.


Convert code for v2->v3:
------------------------
// Place this in main after the storage->load()
// convert code
qDebug() << "START CONVERT";
QList< SceneDocument* > documents = DataStorage::instance()->filteredDocuments(SceneDocument::TypeScene);
foreach(SceneDocument* scene, documents) {
	QVariantMap filter;
	filter[QLatin1String("sceneid_")] = scene->id();
	QVariantList childs;
	SceneDocument lastItem;
	{
		QList< SceneDocument* > items = DataStorage::instance()->filteredDocuments(SceneDocument::TypeAction,filter);
		foreach(SceneDocument* item, items) {
			SceneDocument vItem;
			vItem.setid(item->id());
			vItem.setType(item->type());
			if (lastItem.hasid() && lastItem.hasType())
				vItem.setNextNodes(QStringList()<<lastItem.uid());
			childs.append(vItem.getData());
			lastItem = vItem;
		}
	}
	{
		QList< SceneDocument* > items = DataStorage::instance()->filteredDocuments(SceneDocument::TypeCondition,filter);
		foreach(SceneDocument* item, items) {
			SceneDocument vItem;
			vItem.setid(item->id());
			vItem.setType(item->type());
			if (lastItem.hasid() && lastItem.hasType())
				vItem.setNextNodes(QStringList()<<lastItem.uid());
			childs.append(vItem.getData());
			lastItem = vItem;
		}
	}
	{
		QList< SceneDocument* > items = DataStorage::instance()->filteredDocuments(SceneDocument::TypeEvent,filter);
		foreach(SceneDocument* item, items) {
			SceneDocument vItem;
			vItem.setid(item->id());
			vItem.setType(item->type());
			if (lastItem.hasid() && lastItem.hasType())
				vItem.setNextNodes(QStringList()<<lastItem.uid());
			childs.append(vItem.getData());
			lastItem = vItem;
		}
	}
	scene->getData().insert(QLatin1String("v"),childs);
	qDebug() << "Schreibe Szene:" << childs.size() << scene->getjson();
	datastorage->storeDocument(*scene, true);
}
qDebug() << "FINISH CONVERT";
return 0;